//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferenceMyPhotos
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceMyPhotos.InterfaceMyPhotos")]
    public interface InterfaceMyPhotos
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotos/insertFiles", ReplyAction="http://tempuri.org/InterfaceMyPhotos/insertFilesResponse")]
        System.Threading.Tasks.Task<int> insertFilesAsync(string fileName, string filePath, string fileType, System.DateTime creation, System.Collections.Generic.List<string> personNames, System.Collections.Generic.List<string> locationNames, System.Collections.Generic.List<string> eventNames, System.Collections.Generic.List<string> propertys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotos/modifyFiles", ReplyAction="http://tempuri.org/InterfaceMyPhotos/modifyFilesResponse")]
        System.Threading.Tasks.Task modifyFilesAsync(string fileName, string filePath, System.Collections.Generic.List<string> personNames, System.Collections.Generic.List<string> locationNames, System.Collections.Generic.List<string> eventNames, System.Collections.Generic.List<string> propertys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotos/deleteFiles", ReplyAction="http://tempuri.org/InterfaceMyPhotos/deleteFilesResponse")]
        System.Threading.Tasks.Task deleteFilesAsync(string fileName, string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotos/getPersons", ReplyAction="http://tempuri.org/InterfaceMyPhotos/getPersonsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> getPersonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotos/getLocations", ReplyAction="http://tempuri.org/InterfaceMyPhotos/getLocationsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> getLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotos/getEvents", ReplyAction="http://tempuri.org/InterfaceMyPhotos/getEventsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> getEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotos/getPropertys", ReplyAction="http://tempuri.org/InterfaceMyPhotos/getPropertysResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> getPropertysAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotos/getFilesPath", ReplyAction="http://tempuri.org/InterfaceMyPhotos/getFilesPathResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> getFilesPathAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotos/getFileDetails", ReplyAction="http://tempuri.org/InterfaceMyPhotos/getFileDetailsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> getFileDetailsAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotos/searchFile", ReplyAction="http://tempuri.org/InterfaceMyPhotos/searchFileResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> searchFileAsync(string fileName, string filePath, string fileType, System.DateTime creation, bool searchDate, System.Collections.Generic.List<string> personNames, System.Collections.Generic.List<string> locationNames, System.Collections.Generic.List<string> eventNames, System.Collections.Generic.List<string> propertys);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface InterfaceMyPhotosChannel : ServiceReferenceMyPhotos.InterfaceMyPhotos, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class InterfaceMyPhotosClient : System.ServiceModel.ClientBase<ServiceReferenceMyPhotos.InterfaceMyPhotos>, ServiceReferenceMyPhotos.InterfaceMyPhotos
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public InterfaceMyPhotosClient() : 
                base(InterfaceMyPhotosClient.GetDefaultBinding(), InterfaceMyPhotosClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_InterfaceMyPhotos.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceMyPhotosClient(EndpointConfiguration endpointConfiguration) : 
                base(InterfaceMyPhotosClient.GetBindingForEndpoint(endpointConfiguration), InterfaceMyPhotosClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceMyPhotosClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(InterfaceMyPhotosClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceMyPhotosClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(InterfaceMyPhotosClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceMyPhotosClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<int> insertFilesAsync(string fileName, string filePath, string fileType, System.DateTime creation, System.Collections.Generic.List<string> personNames, System.Collections.Generic.List<string> locationNames, System.Collections.Generic.List<string> eventNames, System.Collections.Generic.List<string> propertys)
        {
            return base.Channel.insertFilesAsync(fileName, filePath, fileType, creation, personNames, locationNames, eventNames, propertys);
        }
        
        public System.Threading.Tasks.Task modifyFilesAsync(string fileName, string filePath, System.Collections.Generic.List<string> personNames, System.Collections.Generic.List<string> locationNames, System.Collections.Generic.List<string> eventNames, System.Collections.Generic.List<string> propertys)
        {
            return base.Channel.modifyFilesAsync(fileName, filePath, personNames, locationNames, eventNames, propertys);
        }
        
        public System.Threading.Tasks.Task deleteFilesAsync(string fileName, string filePath)
        {
            return base.Channel.deleteFilesAsync(fileName, filePath);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> getPersonsAsync()
        {
            return base.Channel.getPersonsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> getLocationsAsync()
        {
            return base.Channel.getLocationsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> getEventsAsync()
        {
            return base.Channel.getEventsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> getPropertysAsync()
        {
            return base.Channel.getPropertysAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> getFilesPathAsync()
        {
            return base.Channel.getFilesPathAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> getFileDetailsAsync(string path)
        {
            return base.Channel.getFileDetailsAsync(path);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> searchFileAsync(string fileName, string filePath, string fileType, System.DateTime creation, bool searchDate, System.Collections.Generic.List<string> personNames, System.Collections.Generic.List<string> locationNames, System.Collections.Generic.List<string> eventNames, System.Collections.Generic.List<string> propertys)
        {
            return base.Channel.searchFileAsync(fileName, filePath, fileType, creation, searchDate, personNames, locationNames, eventNames, propertys);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_InterfaceMyPhotos))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_InterfaceMyPhotos))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return InterfaceMyPhotosClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_InterfaceMyPhotos);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return InterfaceMyPhotosClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_InterfaceMyPhotos);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_InterfaceMyPhotos,
        }
    }
}
